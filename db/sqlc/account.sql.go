// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: account.sql

package db

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
insert into "accounts" (account_holder_id, account_number)
values ($1, $2)
returning id
`

type CreateAccountParams struct {
	AccountHolderID int32 `json:"account_holder_id"`
	AccountNumber   int64 `json:"account_number"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.AccountHolderID, arg.AccountNumber)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAccountByAccountNumber = `-- name: GetAccountByAccountNumber :one
select id, account_holder_id, account_number, balance, created_at
from "accounts"
where account_number = $1
`

func (q *Queries) GetAccountByAccountNumber(ctx context.Context, accountNumber int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByAccountNumber, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountHolderID,
		&i.AccountNumber,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountWithHolder = `-- name: GetAccountWithHolder :one
select accounts.id, account_holder_id, account_number, balance, accounts.created_at, account_holder.id, first_name, last_name, email, phone, address, account_holder.created_at
from "accounts"
         join "account_holders" as "account_holder"
              on "accounts".account_holder_id = "account_holder".id
where "accounts".account_number = $1
`

type GetAccountWithHolderRow struct {
	ID              int32     `json:"id"`
	AccountHolderID int32     `json:"account_holder_id"`
	AccountNumber   int64     `json:"account_number"`
	Balance         string    `json:"balance"`
	CreatedAt       time.Time `json:"created_at"`
	ID_2            int32     `json:"id_2"`
	FirstName       string    `json:"first_name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Phone           string    `json:"phone"`
	Address         string    `json:"address"`
	CreatedAt_2     time.Time `json:"created_at_2"`
}

func (q *Queries) GetAccountWithHolder(ctx context.Context, accountNumber int64) (GetAccountWithHolderRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountWithHolder, accountNumber)
	var i GetAccountWithHolderRow
	err := row.Scan(
		&i.ID,
		&i.AccountHolderID,
		&i.AccountNumber,
		&i.Balance,
		&i.CreatedAt,
		&i.ID_2,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt_2,
	)
	return i, err
}
